[{"/home/thibaultclerc/NEXT/DIPPR/dippr/src/serviceWorkerRegistration.js":"1","/home/thibaultclerc/NEXT/DIPPR/dippr/src/store/store.js":"2","/home/thibaultclerc/NEXT/DIPPR/dippr/src/pages/Login/index.jsx":"3","/home/thibaultclerc/NEXT/DIPPR/dippr/src/pages/Search/index.jsx":"4","/home/thibaultclerc/NEXT/DIPPR/dippr/src/pages/MarketDish/index.jsx":"5","/home/thibaultclerc/NEXT/DIPPR/dippr/src/store/actions/index.jsx":"6","/home/thibaultclerc/NEXT/DIPPR/dippr/src/components/DishCard/index.jsx":"7","/home/thibaultclerc/NEXT/DIPPR/dippr/src/components/UI/Stars/index.jsx":"8","/home/thibaultclerc/NEXT/DIPPR/dippr/src/components/UI/SimpleCard/index.jsx":"9","/home/thibaultclerc/NEXT/DIPPR/dippr/src/pages/MyTransactions/index.jsx":"10","/home/thibaultclerc/NEXT/DIPPR/dippr/src/pages/MyTransactions/TransactionDialog/index.jsx":"11","/home/thibaultclerc/NEXT/DIPPR/dippr/src/pages/Swap/index.jsx":"12","/home/thibaultclerc/NEXT/DIPPR/dippr/src/pages/MyMarketDishes/index.jsx":"13","/home/thibaultclerc/NEXT/DIPPR/dippr/src/pages/MyMarketDishes/MyMarketDishesDisplay/index.jsx":"14"},{"size":5116,"mtime":1607955891980,"results":"15","hashOfConfig":"16"},{"size":648,"mtime":1608375117780,"results":"17","hashOfConfig":"16"},{"size":5381,"mtime":1608429944225,"results":"18","hashOfConfig":"16"},{"size":3201,"mtime":1608384043367,"results":"19","hashOfConfig":"16"},{"size":14860,"mtime":1608430046875,"results":"20","hashOfConfig":"16"},{"size":250,"mtime":1607681528330,"results":"21","hashOfConfig":"16"},{"size":4338,"mtime":1608384043367,"results":"22","hashOfConfig":"16"},{"size":564,"mtime":1607985050010,"results":"23","hashOfConfig":"16"},{"size":957,"mtime":1607939957130,"results":"24","hashOfConfig":"16"},{"size":14687,"mtime":1608462605260,"results":"25","hashOfConfig":"16"},{"size":7197,"mtime":1608430046875,"results":"26","hashOfConfig":"16"},{"size":3061,"mtime":1608465123520,"results":"27","hashOfConfig":"16"},{"size":1043,"mtime":1608465095300,"results":"28","hashOfConfig":"16"},{"size":1553,"mtime":1608464897050,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"15j1p5p",{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},"/home/thibaultclerc/NEXT/DIPPR/dippr/src/serviceWorkerRegistration.js",["62"],"/home/thibaultclerc/NEXT/DIPPR/dippr/src/store/store.js",[],"/home/thibaultclerc/NEXT/DIPPR/dippr/src/pages/Login/index.jsx",["63","64","65","66","67","68","69","70","71","72","73"],"/home/thibaultclerc/NEXT/DIPPR/dippr/src/pages/Search/index.jsx",["74","75"],"/home/thibaultclerc/NEXT/DIPPR/dippr/src/pages/MarketDish/index.jsx",["76","77","78","79"],"/home/thibaultclerc/NEXT/DIPPR/dippr/src/store/actions/index.jsx",[],"/home/thibaultclerc/NEXT/DIPPR/dippr/src/components/DishCard/index.jsx",["80"],"/home/thibaultclerc/NEXT/DIPPR/dippr/src/components/UI/Stars/index.jsx",[],"/home/thibaultclerc/NEXT/DIPPR/dippr/src/components/UI/SimpleCard/index.jsx",[],"/home/thibaultclerc/NEXT/DIPPR/dippr/src/pages/MyTransactions/index.jsx",["81","82","83","84"],"import React, { useState, useEffect } from 'react';\nimport { Grid, Container, Paper, Chip, Avatar } from \"@material-ui/core\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useSelector } from 'react-redux';\nimport Cookies from 'js-cookie';\nimport cooker from '../../assets/img/cooker.png';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport HourglassFullIcon from '@material-ui/icons/HourglassFull';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport TransactionDialog from './TransactionDialog';\nimport Alert from '@material-ui/lab/Alert';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Collapse from '@material-ui/core/Collapse';\nimport IconButton from '@material-ui/core/IconButton';\nimport './index.scss';\n\nconst useStyles = makeStyles((theme) => ({\n  mainContainer: {\n    [theme.breakpoints.down('xs')]: {\n      paddingLeft: 0,\n      paddingRight: 0,\n    }\n  },\n  subMainContainer: {\n    paddingTop: 100,\n    [theme.breakpoints.down('xs')]: {\n      paddingLeft: 0,\n      paddingRight: 0,\n      paddingTop: 0,\n      width: '100vw !important',\n      margin: '0 !important',\n    }\n  },\n  imgContainer : {\n    position: 'relative',\n    [theme.breakpoints.down('xs')]: {\n      paddingLeft: '0 !important',\n      paddingRight: '0 !important',\n      paddingTop: '0 !important'\n    }\n  },\n  image: {\n    borderRadius: 35,\n    width: '70%',\n    [theme.breakpoints.down('xs')]: {\n      display: 'none'\n    }\n  },\n  textContainer: {\n    [theme.breakpoints.down('xs')]: {\n      paddingLeft: '0 !important',\n      paddingRight: '0 !important',\n      paddingTop: '0 !important',\n    }\n  },\n  textPaper: {\n    borderRadius: 35,\n    padding: 25,\n    marginBottom: 20,\n    minHeight: 500,\n    maxHeight: 500,\n    overflow: 'auto',\n    webkitBoxShadow: 'inset -2px -15px 70px -40px rgba(0,0,0,0.30)',\n    mozBoxShadow: 'inset -2px -15px 70px -40px rgba(0,0,0,0.30)',\n    boxShadow: 'inset -2px -15px 70px -40px rgba(0,0,0,0.30)',\n    [theme.breakpoints.down('xs')]: {\n      borderRadius: 0,\n      marginBottom: 0,\n      webkitBoxShadow: '0px 0px 0px 0px rgba(0,0,0,0)',\n      mozBoxShadow: '0px 0px 0px 0px rgba(0,0,0,0)',\n      boxShadow: '0px 0px 0px 0px rgba(0,0,0,0)',\n      maxHeight: 'none',\n    },\n    \"&::-webkit-scrollbar\": {\n      display: 'none'\n    },\n    msOverflowStyle: 'none',  /* IE and Edge */\n    scrollbarWidth: 'none'\n  },\n  itemText: {\n    marginRight: '20px',\n    [theme.breakpoints.down('xs')]: {\n      fontSize: \"smaller\"\n    },\n  },\n  pending: {\n    marginLeft: '20px',\n    color: \"#4BAAF5\"\n  },\n  confirmed: {\n    marginLeft: '20px',\n    color: \"#5CB660\"\n  }\n}));\n\nconst MyTransactions = () => {\n  const classes = useStyles();\n  const user = useSelector(state => state.user.user);\n  const [trocData, setTrocData] = useState([]);\n  const [donationData, setDonationData] = useState([]);\n  const [allData, setAllData] = useState([]);\n  const [selectedTransaction, setSelectedTransaction] = useState([])\n  const [selectedAnswerer, setSelectedAnswerer] = useState([])\n  const [selectedCaller, setSelectedCaller] = useState([])\n  const [open, setOpen] = useState(false);\n  const [isAccepted, setIsAccepted] = useState(false);\n  const [isRefused, setIsRefused] = useState(false);\n  const [isCancelled, setIsCancelled] = useState(false);\n\n\n  useEffect(() => {\n    fetchUserTransactions(\"trocs\")\n    fetchUserTransactions(\"donations\")\n    const interval = setInterval(() => {\n      fetchUserTransactions(\"trocs\")\n      fetchUserTransactions(\"donations\")\n    }, 10000);\n    return () => clearInterval(interval);\n  }, [])\n\n  \n\n  const fetchUserTransactions = (type) => {\n    fetch(`https://dippr-api-development.herokuapp.com/api/users/${user.id}/${type}`, {\n      \"method\": \"GET\",\n      \"headers\": {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": Cookies.get(\"token\")\n      }\n    })\n    .then((response) => response.json())\n    .then((response) => {\n      if (type === \"trocs\") {\n        console.log(response.data, \"response trocs\")\n        const trocs = response.data\n          .filter(transaction => (transaction.attributes.status === 'pending') || (transaction.attributes.status === 'confirmed'))\n        setTrocData(trocs)\n        console.log(trocs)\n      } else {\n        console.log(response.data, \"response donations\")\n        const donations = response.data\n          .filter(transaction => (transaction.attributes.status === 'pending') || (transaction.attributes.status === 'confirmed'))\n        setDonationData(donations) \n        console.log(donations)\n      }\n    }).catch(error => {\n      console.log(error)\n    }).finally(() => {\n    })\n  }\n\n  useEffect(() => {\n    // if (trocData.length === 0 || donationData.length === 0) {\n    //   return\n    // }\n    const allData = trocData.concat(donationData)\n    allData.sort((a, b) => (b.attributes.updated_at).localeCompare((a.attributes.updated_at)))\n    setAllData([...allData])\n  }, [trocData, donationData])\n\n  const handleTransactionClick = (transaction, answerer, caller) => {\n    setSelectedTransaction(transaction)\n    setSelectedAnswerer(answerer)\n    setSelectedCaller(caller)\n    setOpen(true)\n  }\n\n  const handleItemListDisplay = (transaction, currentUser) => {\n    if (transaction.type === \"trocs\") {\n      if (transaction.attributes.answerer_id == currentUser.id) {\n        return (\n          <ListItem spacing={3} button onClick={() => handleTransactionClick(transaction, currentUser, transaction.meta.caller)}>\n            <ListItemAvatar>\n              <Avatar\n                // alt={`Avatar n°${data.id + 1}`}\n                // src={`/static/images/avatar/${value + 1}.jpg`}\n              />\n            </ListItemAvatar>\n            <ListItemText\n              dense\n              className={classes.itemText}\n              id={transaction.id}\n              primary={`${transaction.meta.caller.first_name} vous propose son\n              ${transaction.meta.caller_dish.name} contre votre ${transaction.meta.answer_dish.name}`\n              }\n            />\n            <Chip size=\"small\" label=\"TROC\" className={classes.chip} color=\"secondary\" />\n            {transaction.attributes.status === 'pending' ? \n              <HourglassFullIcon className={classes.pending}/>\n              : <CheckCircleIcon className={classes.confirmed}/>\n            }\n          </ListItem>\n        )\n      } else {\n        return (\n          <ListItem spacing={3} button onClick={() => handleTransactionClick(transaction, transaction.meta.answerer, currentUser)}>\n            <ListItemAvatar>\n              <Avatar\n                // alt={`Avatar n°${data.id + 1}`}\n                // src={`/static/images/avatar/${value + 1}.jpg`}\n              />\n            </ListItemAvatar>\n            <ListItemText\n              className={classes.itemText}\n              id={transaction.id}\n              primary={`Vous avez proposé votre ${transaction.meta.caller_dish.name} à\n              ${transaction.meta.answerer.first_name} contre son  ${transaction.meta.answer_dish.name}`\n              }\n            />\n            <Chip size=\"small\" label=\"TROC\" className={classes.chip} color=\"secondary\" />\n            {transaction.attributes.status === 'pending' ? \n              <HourglassFullIcon className={classes.pending}/>\n              : <CheckCircleIcon className={classes.confirmed}/>\n            }\n          </ListItem>\n        )\n      }\n    } else if (transaction.type === \"donations\") {\n      if (transaction.attributes.caller_id == currentUser.id) {\n        return (\n          <ListItem spacing={3} button onClick={() => handleTransactionClick(transaction, transaction.meta.answerer, currentUser)}>\n            <ListItemAvatar>\n              <Avatar\n                // alt={`Avatar n°${data.id + 1}`}\n                // src={`/static/images/avatar/${value + 1}.jpg`}\n              />\n            </ListItemAvatar>\n            <ListItemText\n              className={classes.itemText}\n              id={transaction.id}\n              primary={`Vous avez demandé à ${transaction.meta.answerer.first_name} son \n              ${transaction.meta.answer_dish.name}`\n              }\n            />\n            <Chip size=\"small\" label=\"DON\" className={classes.chip} color=\"primary\" />\n            {transaction.attributes.status === 'pending' ? \n              <HourglassFullIcon className={classes.pending}/>\n              : <CheckCircleIcon className={classes.confirmed}/>\n            }\n          </ListItem>\n        )\n      } else {\n        return (\n          <ListItem spacing={3} button onClick={() => handleTransactionClick(transaction, currentUser, transaction.meta.caller)}>\n            <ListItemAvatar>\n              <Avatar\n                // alt={`Avatar n°${data.id + 1}`}\n                // src={`/static/images/avatar/${value + 1}.jpg`}\n              />\n            </ListItemAvatar>\n            <ListItemText\n              className={classes.itemText}\n              id={transaction.id}\n              primary={`${transaction.meta.caller.first_name} vous a demandé votre\n              ${transaction.meta.answer_dish.name}`\n              }\n            />\n            <Chip size=\"small\" label=\"DON\" className={classes.chip} color=\"primary\" />\n            {transaction.attributes.status === 'pending' ? \n              <HourglassFullIcon className={classes.pending}/>\n              : <CheckCircleIcon className={classes.confirmed}/>\n            }\n          </ListItem>\n        )\n      }\n    }\n  }\n\n  const handleTransactionCreation = (userAnswer) => {\n    let transactionData;\n    let type;\n      if (selectedTransaction.type === \"trocs\") {\n      type = \"trocs\"\n      transactionData = {\n        status: userAnswer\n      }\n    } else {\n      type = \"donations\"\n      transactionData = {\n        status: userAnswer\n      }\n    }\n    fetch(`https://dippr-api-development.herokuapp.com/api/${type}/${selectedTransaction.id}`, {\n      \"method\": \"PUT\",\n      \"headers\": {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": Cookies.get(\"token\")\n      },\n      \"body\": JSON.stringify(transactionData)\n    })\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error(\"There was an error with the Rails API\")\n      } else {\n      return response.json()\n      }\n    })\n    .then(() => {\n      if (userAnswer === 1) {\n        setIsAccepted(true)\n      } else if (userAnswer === 2) {\n        setIsRefused(true)\n      } else {\n        setIsCancelled(true)\n      }\n    }).catch(error => {\n      console.log(error)\n    })\n  }\n\n  useEffect(() => {\n    let acceptedTimeout;\n    if (isAccepted) {\n      acceptedTimeout = setTimeout(() => {\n        setIsAccepted(false)\n      }, 2000)\n    }\n    return () => {\n      clearTimeout(acceptedTimeout)\n    }\n  }, [isAccepted])\n\n  useEffect(() => {\n    let refusedTimeout;\n    if (isRefused) {\n      refusedTimeout = setTimeout(() => {\n        setIsRefused(false)\n      }, 2000)\n    }\n    return () => {\n      clearTimeout(refusedTimeout)\n    }\n  }, [isRefused])\n\n  useEffect(() => {\n    let cancelledTimeout;\n    if (isCancelled) {\n      cancelledTimeout = setTimeout(() => {\n        setIsCancelled(false)\n      }, 2000)\n    }\n    return () => {\n      clearTimeout(cancelledTimeout)\n    }\n  }, [isCancelled])\n\n  \n  \n  return (\n    <>\n    {isAccepted && \n      <Collapse\n        in={isAccepted}\n        style={{\n          zIndex: 10,\n          position: \"absolute\",\n          width: \"100%\"\n        }}\n        >\n        <Alert\n          severity=\"success\"\n          action={\n            <IconButton\n              aria-label=\"close\"\n              severity=\"success\"\n              size=\"small\"\n              onClick={() => {\n                setIsAccepted(false);\n              }}\n            >\n              <CloseIcon fontSize=\"inherit\" />\n            </IconButton>\n          }\n        >\n          {selectedTransaction.type === \"trocs\" ? \n            `La demande de troc a bien été acceptée !`\n            : `La demande de don a bien été acceptée !`\n          }\n        </Alert>\n      </Collapse>\n    }\n    {isRefused && \n      <Collapse\n        in={isRefused}\n        style={{\n          zIndex: 10,\n          position: \"absolute\",\n          width: \"100%\"\n        }}\n        >\n        <Alert\n          severity=\"info\"\n          action={\n            <IconButton\n              aria-label=\"close\"\n              severity=\"info\"\n              size=\"small\"\n              onClick={() => {\n                setIsRefused(false);\n              }}\n            >\n              <CloseIcon fontSize=\"inherit\" />\n            </IconButton>\n          }\n        >\n          {selectedTransaction.type === \"trocs\" ? \n            `La demande de troc a bien été refusée !`\n            : `La demande de don a bien été refusée !`\n          }\n        </Alert>\n      </Collapse>\n    }\n    {isCancelled && \n      <Collapse\n        in={isCancelled}\n        style={{\n          zIndex: 10,\n          position: \"absolute\",\n          width: \"100%\"\n        }}\n        >\n        <Alert\n          severity=\"info\"\n          action={\n            <IconButton\n              aria-label=\"close\"\n              severity=\"info\"\n              size=\"small\"\n              onClick={() => {\n                setIsCancelled(false);\n              }}\n            >\n              <CloseIcon fontSize=\"inherit\" />\n            </IconButton>\n          }\n        >\n          {selectedTransaction.type === \"trocs\" ? \n            `La demande de troc a bien été annulée !`\n            : `La demande de don a bien été annulée !`\n          }\n        </Alert>\n      </Collapse>\n    }\n    {open &&\n      <TransactionDialog\n        open={open}\n        handleClose={(closeValue) => setOpen(closeValue)}\n        handleSelectedValue={(userAnswer) => handleTransactionCreation(userAnswer)}\n        transaction={selectedTransaction}\n        answerer={selectedAnswerer}\n        caller={selectedCaller}\n        currentUser={user}\n      />\n    }\n      <Grid container fixed spacing={3} className={classes.subMainContainer}>\n        <Grid item xs={12} md={6} className={classes.imgContainer}>\n          <img className={classes.image} src={cooker} alt=\"cooker\"></img>   \n        </Grid>\n        <Grid item xs={12} md={6} className={classes.textContainer}>\n          <Paper className={classes.textPaper}>\n          <List className={classes.root}>\n            {allData && allData.map((data) => {\n              return handleItemListDisplay(data, user)\n            })}\n          </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    </>\n  )\n}\n\nexport default MyTransactions\n","/home/thibaultclerc/NEXT/DIPPR/dippr/src/pages/MyTransactions/TransactionDialog/index.jsx",["85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100"],"import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Avatar from '@material-ui/core/Avatar';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport Dialog from '@material-ui/core/Dialog';\nimport PersonIcon from '@material-ui/icons/Person';\nimport SentimentVeryDissatisfiedIcon from '@material-ui/icons/SentimentVeryDissatisfied';\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\nimport Typography from '@material-ui/core/Typography';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    \"&:focus\": {\n      backgroundColor:'#edf5ff',\n    },\n  },\n  submitBtn: {\n    marginTop: 10,\n    margin: 'auto',\n    display: 'block',\n    padding: 10\n  },\n  image: {\n    width: \"-webkit-fill-available\"\n  }\n}))\n\nconst TransactionDialog = ({open, handleSelectedValue, handleClose, transaction, answerer, caller, currentUser}) => {\n  const [selectedValue, setSelectedValue] = useState(null);\n  const classes = useStyles();\n\n  const handleListItemClick = (userResponse) => {\n    if (userResponse !== null) {\n      handleSelectedValue(userResponse)\n      handleClose(false)\n    }\n  }\n\n  const handleModalClose = () => {\n    handleClose(false)\n  }\n\n  const handleItemDisplay = () => {\n    if (transaction.type === \"trocs\") {\n      if (answerer.id == currentUser.id) {\n        return (\n          <>\n            <img className={classes.image} src={`https://dippr-api-development.herokuapp.com${transaction.meta.caller_dish.photo_url}`}></img>\n            <ListItem key={transaction.id} button>\n              <ListItemAvatar>\n                <Avatar\n                  // alt={`Avatar n°${value + 1}`}\n                  // src={`/static/images/avatar/${value + 1}.jpg`}\n                />\n              </ListItemAvatar>\n              <ListItemText id={transaction.id} primary={caller.first_name} />\n              <Typography variant=\"body2\" color=\"textPrimary\">\n                {caller.city}\n              </Typography>\n            </ListItem>\n            <DialogContent dividers>\n              <Typography variant=\"body1\" color=\"textPrimary\">\n                {caller.first_name} souhaite échanger son {transaction.meta.caller_dish.name} contre votre \n                  {transaction.meta.answer_dish.name}\n              </Typography>\n            </DialogContent>\n            <MuiDialogActions>\n              <Button autoFocus onClick={() => handleListItemClick(1)} color=\"primary\">\n                ACCEPTER\n              </Button>\n              <Button autoFocus onClick={() => handleListItemClick(2)} color=\"secondary\">\n                REFUSER\n              </Button>\n            </MuiDialogActions>\n          </>\n        )\n      } else {\n        return (\n          <>\n            <img className={classes.image} src={`https://dippr-api-development.herokuapp.com${transaction.meta.answer_dish.photo_url}`}></img>\n            <ListItem key={transaction.id} button>\n              <ListItemAvatar>\n                <Avatar\n                  // alt={`Avatar n°${value + 1}`}\n                  // src={`/static/images/avatar/${value + 1}.jpg`}\n                />\n              </ListItemAvatar>\n              <ListItemText id={transaction.id} primary={answerer.first_name} />\n              <Typography variant=\"body2\" color=\"textPrimary\">\n                {answerer.city}\n              </Typography>\n            </ListItem>\n            <DialogContent dividers>\n              <Typography variant=\"body1\" color=\"textPrimary\">\n                Vous avez proposé votre {transaction.meta.caller_dish.name} à\n                {answerer.first_name} contre son  {transaction.meta.answer_dish.name}\n              </Typography>\n            </DialogContent>\n            <MuiDialogActions>\n              <Button autoFocus onClick={() => handleListItemClick(3)} color=\"secondary\">\n                ANNULER\n              </Button>\n            </MuiDialogActions>\n          </>\n        )\n      }\n    } else if (transaction.type === \"donations\") {\n      if (caller.id == currentUser.id) {\n        return (\n          <>\n            <img className={classes.image} src={`https://dippr-api-development.herokuapp.com${transaction.meta.answer_dish.photo_url}`}></img>\n            <ListItem key={transaction.id} button>\n              <ListItemAvatar>\n                <Avatar\n                  // alt={`Avatar n°${value + 1}`}\n                  // src={`/static/images/avatar/${value + 1}.jpg`}\n                />\n              </ListItemAvatar>\n              <ListItemText id={transaction.id} primary={caller.first_name} />\n              <Typography variant=\"body2\" color=\"textPrimary\">\n                {caller.city}\n              </Typography>\n            </ListItem>\n            <DialogContent dividers>\n              <Typography variant=\"body1\" color=\"textPrimary\">\n                Vous avez demandé à {answerer.first_name} son \n                {transaction.meta.answer_dish.name}\n              </Typography>\n            </DialogContent>\n            <MuiDialogActions>\n              <Button autoFocus onClick={() => handleListItemClick(3)} color=\"secondary\">\n                ANNULER\n              </Button>\n            </MuiDialogActions>\n          </>\n        )\n      } else {\n        return (\n        <>\n          <img className={classes.image} src={`https://dippr-api-development.herokuapp.com${transaction.meta.answer_dish.photo_url}`}></img>\n          <ListItem key={transaction.id} button>\n            <ListItemAvatar>\n              <Avatar\n                // alt={`Avatar n°${value + 1}`}\n                // src={`/static/images/avatar/${value + 1}.jpg`}\n              />\n            </ListItemAvatar>\n            <ListItemText id={transaction.id} primary={caller.first_name} />\n            <Typography variant=\"body2\" color=\"textPrimary\">\n              {caller.city}\n            </Typography>\n          </ListItem>\n          <DialogContent dividers>\n            <Typography variant=\"body1\" color=\"textPrimary\">\n              {caller.first_name} vous a demandé votre\n              {transaction.meta.answer_dish.name}\n            </Typography>\n          </DialogContent>\n          <MuiDialogActions>\n            <Button autoFocus onClick={() => handleListItemClick(1)} color=\"primary\">\n              ACCEPTER\n            </Button>\n            <Button autoFocus onClick={() => handleListItemClick(1)} color=\"secondary\">\n              REFUSER\n            </Button>\n          </MuiDialogActions>\n        </>\n        )\n      }\n    }\n  }\n\n  return (\n    <>\n      <Dialog onClose={handleModalClose} aria-labelledby=\"simple-dialog-title\" open={open}>\n        {handleItemDisplay()}\n      </Dialog>\n    </>\n  );\n}\n\nexport default TransactionDialog;\n","/home/thibaultclerc/NEXT/DIPPR/dippr/src/pages/Swap/index.jsx",[],"/home/thibaultclerc/NEXT/DIPPR/dippr/src/pages/MyMarketDishes/index.jsx",["101"],"import React, { useState, useEffect } from 'react'\nimport MyMarketDishesDisplay from './MyMarketDishesDisplay';\nimport { useSelector } from 'react-redux';\n\n\nconst MyMarketDishes = () => {\n  const [data, setData] = useState([]);\n  const user = useSelector(state => state.user.user);\n\n  useEffect(\n    () => {\n        fetch(`https://dippr-api-development.herokuapp.com/api/users/${user.id}/market_dishes`, {\n          \"method\": \"GET\",\n          \"headers\": {\n            \"Content-Type\": \"application/json\"\n          },\n        })\n        .then((response) => {\n          return response.json()\n        })\n        .then((response) => {\n          setData(response.data)\n        }).catch(error => {\n          console.log(error)\n        })\n    },\n    []\n  );\n\n  return (\n    <>\n      {data.length > 0 ?\n        <> \n          <MyMarketDishesDisplay\n            data={data}\n            style={{marginTop: \"5em\"}}\n          />\n        </>\n      : <h1> Vous n'avez pas de plat sur le marché !</h1>\n      }\n    </>\n  );\n};\n\nexport default MyMarketDishes;\n","/home/thibaultclerc/NEXT/DIPPR/dippr/src/pages/MyMarketDishes/MyMarketDishesDisplay/index.jsx",["102","103","104","105","106"],"import React, { useEffect, useState } from 'react'\nimport DishCard from '../../../components/DishCard';\nimport Loader from '../../../components/UI/Loader';\nimport Map from '../../../components/Map';\nimport dishSearch1 from '../../../assets/img/dishSearch1.png';\nimport { makeStyles } from '@material-ui/core/styles'\nimport { Grid } from '@material-ui/core/'\nimport './index.scss'\n\nconst useStyles = makeStyles(theme => ({\n    cardContainer: {\n        flexGrow: 1,\n        padding: theme.spacing(2)\n    }\n}))\n\nconst MyMarketDishesDisplay = ({data}) => {\n  const classes = useStyles()\n\n  return (\n    <div className={classes.cardContainer}>\n      <Grid\n          container\n          spacing={2}\n          direction=\"row\"\n          justify=\"flex-start\"\n          alignItems=\"flex-start\"\n      >\n        {data.map(dish => {\n        const dishData = dish.meta.user_dish\n        return (\n          <Grid item xs={6} sm={4} md={3} lg={2} key={dish.id} width={300}>\n            <DishCard\n              market_dish_id={dish.id}\n              user_first_name={dish.meta.user_first_name}\n              name={dishData.name}\n              description={dishData.description}\n              dish_rating={dishData.dish_rating}\n              user_id={dishData.user_id}\n              created_at={dishData.created_at}\n              type={dish.attributes.market_dish_type}\n              type_of_card='market_dish'\n              photo_url={dishData.photo_url}\n            />\n          </Grid>\n        )})}\n      </Grid>\n    </div>\n  )\n}\n\nexport default MyMarketDishesDisplay\n",{"ruleId":"107","severity":1,"message":"108","line":21,"column":7,"nodeType":"109","messageId":"110","endLine":21,"endColumn":12},{"ruleId":"107","severity":1,"message":"111","line":2,"column":26,"nodeType":"109","messageId":"110","endLine":2,"endColumn":35},{"ruleId":"107","severity":1,"message":"112","line":3,"column":10,"nodeType":"109","messageId":"110","endLine":3,"endColumn":21},{"ruleId":"107","severity":1,"message":"113","line":12,"column":8,"nodeType":"109","messageId":"110","endLine":12,"endColumn":24},{"ruleId":"107","severity":1,"message":"114","line":13,"column":8,"nodeType":"109","messageId":"110","endLine":13,"endColumn":16},{"ruleId":"107","severity":1,"message":"115","line":45,"column":10,"nodeType":"109","messageId":"110","endLine":45,"endColumn":15},{"ruleId":"107","severity":1,"message":"116","line":45,"column":17,"nodeType":"109","messageId":"110","endLine":45,"endColumn":25},{"ruleId":"107","severity":1,"message":"117","line":46,"column":17,"nodeType":"109","messageId":"110","endLine":46,"endColumn":25},{"ruleId":"107","severity":1,"message":"118","line":50,"column":9,"nodeType":"109","messageId":"110","endLine":50,"endColumn":17},{"ruleId":"119","severity":1,"message":"120","line":69,"column":7,"nodeType":"121","messageId":"122","endLine":69,"endColumn":57},{"ruleId":"119","severity":1,"message":"120","line":81,"column":5,"nodeType":"121","messageId":"122","endLine":81,"endColumn":28},{"ruleId":"123","severity":1,"message":"124","line":93,"column":13,"nodeType":"125","endLine":93,"endColumn":66},{"ruleId":"126","severity":1,"message":"127","line":54,"column":6,"nodeType":"128","endLine":54,"endColumn":27,"suggestions":"129"},{"ruleId":"130","severity":1,"message":"131","line":57,"column":5,"nodeType":"132","messageId":"133","endLine":64,"endColumn":6},{"ruleId":"107","severity":1,"message":"134","line":164,"column":23,"nodeType":"109","messageId":"110","endLine":164,"endColumn":37},{"ruleId":"126","severity":1,"message":"135","line":189,"column":6,"nodeType":"128","endLine":189,"endColumn":34,"suggestions":"136"},{"ruleId":"137","severity":1,"message":"138","line":205,"column":76,"nodeType":"139","messageId":"140","endLine":205,"endColumn":78},{"ruleId":"141","severity":1,"message":"142","line":432,"column":13,"nodeType":"125","endLine":432,"endColumn":145},{"ruleId":"107","severity":1,"message":"143","line":94,"column":20,"nodeType":"109","messageId":"110","endLine":94,"endColumn":31},{"ruleId":"107","severity":1,"message":"144","line":2,"column":16,"nodeType":"109","messageId":"110","endLine":2,"endColumn":25},{"ruleId":"126","severity":1,"message":"145","line":122,"column":6,"nodeType":"128","endLine":122,"endColumn":8,"suggestions":"146"},{"ruleId":"137","severity":1,"message":"138","line":173,"column":46,"nodeType":"139","messageId":"140","endLine":173,"endColumn":48},{"ruleId":"137","severity":1,"message":"138","line":222,"column":44,"nodeType":"139","messageId":"140","endLine":222,"endColumn":46},{"ruleId":"107","severity":1,"message":"111","line":1,"column":27,"nodeType":"109","messageId":"110","endLine":1,"endColumn":36},{"ruleId":"107","severity":1,"message":"147","line":2,"column":8,"nodeType":"109","messageId":"110","endLine":2,"endColumn":17},{"ruleId":"107","severity":1,"message":"148","line":6,"column":8,"nodeType":"109","messageId":"110","endLine":6,"endColumn":12},{"ruleId":"107","severity":1,"message":"149","line":10,"column":8,"nodeType":"109","messageId":"110","endLine":10,"endColumn":19},{"ruleId":"107","severity":1,"message":"150","line":12,"column":8,"nodeType":"109","messageId":"110","endLine":12,"endColumn":25},{"ruleId":"107","severity":1,"message":"151","line":14,"column":8,"nodeType":"109","messageId":"110","endLine":14,"endColumn":18},{"ruleId":"107","severity":1,"message":"152","line":15,"column":8,"nodeType":"109","messageId":"110","endLine":15,"endColumn":37},{"ruleId":"107","severity":1,"message":"153","line":16,"column":8,"nodeType":"109","messageId":"110","endLine":16,"endColumn":28},{"ruleId":"107","severity":1,"message":"154","line":38,"column":10,"nodeType":"109","messageId":"110","endLine":38,"endColumn":23},{"ruleId":"107","severity":1,"message":"155","line":38,"column":25,"nodeType":"109","messageId":"110","endLine":38,"endColumn":41},{"ruleId":"137","severity":1,"message":"138","line":54,"column":23,"nodeType":"139","messageId":"140","endLine":54,"endColumn":25},{"ruleId":"123","severity":1,"message":"124","line":57,"column":13,"nodeType":"125","endLine":57,"endColumn":137},{"ruleId":"123","severity":1,"message":"124","line":89,"column":13,"nodeType":"125","endLine":89,"endColumn":137},{"ruleId":"137","severity":1,"message":"138","line":117,"column":21,"nodeType":"139","messageId":"140","endLine":117,"endColumn":23},{"ruleId":"123","severity":1,"message":"124","line":120,"column":13,"nodeType":"125","endLine":120,"endColumn":137},{"ruleId":"123","severity":1,"message":"124","line":149,"column":11,"nodeType":"125","endLine":149,"endColumn":135},{"ruleId":"126","severity":1,"message":"156","line":27,"column":5,"nodeType":"128","endLine":27,"endColumn":7,"suggestions":"157"},{"ruleId":"107","severity":1,"message":"111","line":1,"column":17,"nodeType":"109","messageId":"110","endLine":1,"endColumn":26},{"ruleId":"107","severity":1,"message":"158","line":1,"column":28,"nodeType":"109","messageId":"110","endLine":1,"endColumn":36},{"ruleId":"107","severity":1,"message":"159","line":3,"column":8,"nodeType":"109","messageId":"110","endLine":3,"endColumn":14},{"ruleId":"107","severity":1,"message":"160","line":4,"column":8,"nodeType":"109","messageId":"110","endLine":4,"endColumn":11},{"ruleId":"107","severity":1,"message":"161","line":5,"column":8,"nodeType":"109","messageId":"110","endLine":5,"endColumn":19},"no-unused-vars","'swUrl' is assigned a value but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useSelector' is defined but never used.","'FormControlLabel' is defined but never used.","'Checkbox' is defined but never used.","'alert' is assigned a value but never used.","'setAlert' is assigned a value but never used.","'setModal' is assigned a value but never used.","'onSubmit' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'changeCategory'. Either include it or remove the dependency array.","ArrayExpression",["162"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'setIsSearching' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dishID' and 'fetchUserTransactions'. Either include them or remove the dependency array.",["163"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'setCardType' is assigned a value but never used.","'Container' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchUserTransactions'. Either include it or remove the dependency array.",["164"],"'PropTypes' is defined but never used.","'List' is defined but never used.","'DialogTitle' is defined but never used.","'DialogContentText' is defined but never used.","'PersonIcon' is defined but never used.","'SentimentVeryDissatisfiedIcon' is defined but never used.","'AddCircleOutlineIcon' is defined but never used.","'selectedValue' is assigned a value but never used.","'setSelectedValue' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'user.id'. Either include it or remove the dependency array.",["165"],"'useState' is defined but never used.","'Loader' is defined but never used.","'Map' is defined but never used.","'dishSearch1' is defined but never used.",{"desc":"166","fix":"167"},{"desc":"168","fix":"169"},{"desc":"170","fix":"171"},{"desc":"172","fix":"173"},"Update the dependencies array to be: [categoryValue, changeCategory, data]",{"range":"174","text":"175"},"Update the dependencies array to be: [isSuccess, isCancelSuccess, dishID, fetchUserTransactions]",{"range":"176","text":"177"},"Update the dependencies array to be: [fetchUserTransactions]",{"range":"178","text":"179"},"Update the dependencies array to be: [user.id]",{"range":"180","text":"181"},[1716,1737],"[categoryValue, changeCategory, data]",[5092,5120],"[isSuccess, isCancelSuccess, dishID, fetchUserTransactions]",[3738,3740],"[fetchUserTransactions]",[743,745],"[user.id]"]